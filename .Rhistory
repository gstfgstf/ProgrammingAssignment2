find.package("devtools")
install.packages("devtools")
find.package("devtools")
find rtools()
find_rtools()
library(devtools)
find_rtools()
install.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE).
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which((ints > 7))
which(ints > 7)
any(ints < 0)
all(ints < 0)
all(ints > 0)
library(swirl)
swirl()
head(flags)
dim(falgs)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapplunique_vals <- y(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
Use tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
sapply(iris, mean)
tapply(iris$Sepal.Length, iris$Species, summary)
sapply(iris[,4], mean)
sapply(iris[,1:4], mean)
apply(iris[,1:4], mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
?colMeans
colMeans(iris)
colMeans(iris[,1:4])
rowMeans(iris[,1:4])
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars,mean)
?mean
split(mtcars, mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
?with
apply(mtcars,2,mean)
sapply(mtcars,cyl,mean)
debug(ls)
ls()
e
with(mtcars,tapply(mpg,cyl,mean))
x <- with(mtcars,tapply(mpg,cyl,mean))
x <- with(mtcars,tapply(mpg,cyl,mean))
x
?debug
debug(ls)
undebug(ls)
library(datasets)
data(mtcars)
x a- with(mtcars, tapply(mpg, cyl, mean))
x <- with(mtcars, tapply(mpg, cyl, mean))
x
abs(x$4 - x$8)
abs(x$4[1,] - x$8[1,])
abs(26.66364 - 15.10000)
?det
library(matlib)
install.packages("matlib")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makevector(1)
makeVector(1)
cachemean(1)
cachemean(1, 2)
cachemean(c(1, 2)
)
cachemean(c(1, 2))
cachemean(c(1, 2), getmean)
makeVector(1)
makeVector(c(1, 2))
makevector()
makeVector()
cachemean(makeVector(1))
cachemean(makeVector(c(1, 2, 3)))
cachemean(makeVector(c(1, 2, 3, 4)))
cachemean(makeVector(c(3, 4, 33, 4)))
setwd("~/_Â¤ Utbildning/Data Science Specialization/02 - R Programming/week3ass/ProgrammingAssignment2")
?solve
?inv
library(matlib)
inv
?inv
inv(matrix(c(1:4), c(1:4)))
matrix(c(1:4), c(1:4))
matrix(c(1:4, 1:4))
?matrix
matrix(c(1:8, 1:8), 4, 4)
inv(matrix(c(1:8, 1:8), 4, 4))
inv(matrix(1:4, 2:5, 3:6, 4:7))
matrix(1:4, 2:5, 3:6, 4:7)
matrix(1:4, 2:5, 3:6, 4:7, 4, 4)
matrix(c(1:4, 2:5, 3:6, 4:7), 4, 4)
inv(matrix(c(1:4, 2:5, 3:6, 4:7), 4, 4))
inv(matrix(c(5, 3, 4, 1, -1, 0, 0, 2, -1), 3, 3))
solve(inv(matrix(c(5, 3, 4, 1, -1, 0, 0, 2, -1), 3, 3)))
solve(matrix(c(5, 3, 4, 1, -1, 0, 0, 2, -1), 3, 3))
